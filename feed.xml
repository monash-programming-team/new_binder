<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://blog.monashicpc.com/new_binder//new_binder/</id><title>Monash Code Binder</title><subtitle>A collection of algorithms, explanations and training problems</subtitle> <updated>2022-10-01T00:00:50+10:00</updated> <author> <name>Monash Programming Team</name> <uri>https://blog.monashicpc.com/new_binder//new_binder/</uri> </author><link rel="self" type="application/atom+xml" href="https://blog.monashicpc.com/new_binder//new_binder/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://blog.monashicpc.com/new_binder//new_binder/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2022 Monash Programming Team </rights> <icon>/new_binder/assets/img/favicons/favicon.ico</icon> <logo>/new_binder/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Union Find / DSU</title><link href="https://blog.monashicpc.com/new_binder//new_binder/posts/uf/" rel="alternate" type="text/html" title="Union Find / DSU" /><published>2021-12-15T12:00:00+11:00</published> <updated>2021-12-27T13:53:13+11:00</updated> <id>https://blog.monashicpc.com/new_binder//new_binder/posts/uf/</id> <content src="https://blog.monashicpc.com/new_binder//new_binder/posts/uf/" /> <author> <name>Monash Programming Team</name> </author> <category term="Data Structures" /> <summary> Where is this useful? In many problems, translating into a graph structure can prove helpful, as we can describe our problem in very abstract terms. Once you’ve translated into this graph structure, often you might want to know whether two vertices are connected via a path, and if this is not the case, what two separate components they come from. Union Find allows us to not only answer this q... </summary> </entry> <entry><title>Challenge Problems - 2021 Sem 2, Contest 1</title><link href="https://blog.monashicpc.com/new_binder//new_binder/posts/problems-21-s2-c1/" rel="alternate" type="text/html" title="Challenge Problems - 2021 Sem 2, Contest 1" /><published>2021-08-23T11:00:00+10:00</published> <updated>2021-08-23T11:00:00+10:00</updated> <id>https://blog.monashicpc.com/new_binder//new_binder/posts/problems-21-s2-c1/</id> <content src="https://blog.monashicpc.com/new_binder//new_binder/posts/problems-21-s2-c1/" /> <author> <name>Monash Programming Team</name> </author> <category term="Contests" /> <summary> Sports Loans Statement Andrew is head of the sports club, and manages the inventory. Part of Andrew’s job is loaning footballs to people, and collecting those footballs once they have been used. At the start of the day, Andrew has \(r\) footballs in stock, and knows that \(p+q\) people will approach him over the course of the day. \(p\) people will request a football, while \(q\) people will... </summary> </entry> <entry><title>Least Common Ancestor (LCA)</title><link href="https://blog.monashicpc.com/new_binder//new_binder/posts/lca/" rel="alternate" type="text/html" title="Least Common Ancestor (LCA)" /><published>2021-04-20T22:00:00+10:00</published> <updated>2021-12-13T11:01:10+11:00</updated> <id>https://blog.monashicpc.com/new_binder//new_binder/posts/lca/</id> <content src="https://blog.monashicpc.com/new_binder//new_binder/posts/lca/" /> <author> <name>Monash Programming Team</name> </author> <category term="Data Structures" /> <category term="Trees" /> <summary> Where is this useful? The Least Common Ancestor (LCA) data structure is useful wherever you have a directed graph where every vertex has out-degree \(\leq 1\). In more common terms, each vertex has a unique determined ‘parent’, or it is a root node, with no parent. The most common (and almost always only) example being a rooted tree. On these particular graphs, the LCA gives us a fast way to ... </summary> </entry> <entry><title>Primes and Factorization Techniques</title><link href="https://blog.monashicpc.com/new_binder//new_binder/posts/factorization/" rel="alternate" type="text/html" title="Primes and Factorization Techniques" /><published>2021-04-05T11:00:00+10:00</published> <updated>2021-04-05T21:02:26+10:00</updated> <id>https://blog.monashicpc.com/new_binder//new_binder/posts/factorization/</id> <content src="https://blog.monashicpc.com/new_binder//new_binder/posts/factorization/" /> <author> <name>Monash Programming Team</name> </author> <category term="Math" /> <summary> Why? Many number theoretic problems in competitive programming require analysing the factors or prime factors of a number. Here I’ll list a few techniques for finding these factors, and some techniques / properties involving the factors / prime factors of a number. Preliminaries First off, lets define our basic terms, then we can get into the interesting stuff. Definitions For a positive i... </summary> </entry> <entry><title>Modular Arithmetic</title><link href="https://blog.monashicpc.com/new_binder//new_binder/posts/mod/" rel="alternate" type="text/html" title="Modular Arithmetic" /><published>2021-03-29T18:40:00+11:00</published> <updated>2021-04-01T22:07:32+11:00</updated> <id>https://blog.monashicpc.com/new_binder//new_binder/posts/mod/</id> <content src="https://blog.monashicpc.com/new_binder//new_binder/posts/mod/" /> <author> <name>Monash Programming Team</name> </author> <category term="Math" /> <summary> What is it? Modular Arithmetic encompasses all sorts of theorems and optimizations surrounding the % operator in C and Python. As you’ll see in the related problems, modulo arithmetic is often tied together in a question regarding counting things (combinatorics) or probabilities. For those who haven’t come up across it before, % is an operation normally performed on two integers \(a\) and \(... </summary> </entry> </feed>
